<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web assembly on protiumx blog</title><link>https://protiumx.dev/blog/tags/web-assembly/</link><description>Recent content in web assembly on protiumx blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 17 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://protiumx.dev/blog/tags/web-assembly/index.xml" rel="self" type="application/rss+xml"/><item><title>An interpreted language you can try in my terminal website</title><link>https://protiumx.dev/blog/posts/an-interpreted-language-you-can-try-in-my-terminal-website/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/an-interpreted-language-you-can-try-in-my-terminal-website/</guid><description>A few weeks ago I started reading Writing An Interpreter In Go and while reading it and implementing the interpreter a question popped up: what if I can run this interpreter in the terminal in my website?
To recap, a few months ago I decided to transform my personal website into a terminal (read more about it here). In today&amp;rsquo;s post I&amp;rsquo;ll give an overview of the whole implementation, but first a preview:</description></item></channel></rss>