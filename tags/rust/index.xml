<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on protiumx blog</title><link>https://protiumx.dev/blog/tags/rust/</link><description>Recent content in rust on protiumx blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 23 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://protiumx.dev/blog/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>An HTTP request parser with rust and pest.rs</title><link>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest-rs/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest-rs/</guid><description>Introduction I happened to have learned about parsing expression grammars a few days ago and got really excited about writing my own grammar. As I was missing this VS Code extension when working on neovim, an idea popped up: What if I write an HTTP grammar and an execute request from an interactive prompt?
Preview:
Preparation For our grammar, we need to make sure we understand the HTTP standard defined here.</description></item></channel></rss>