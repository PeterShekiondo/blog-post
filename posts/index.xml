<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on protiumx blog</title><link>https://protiumx.dev/blog/posts/</link><description>Recent content in Posts on protiumx blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Wed, 25 May 2022 11:42:13 +0200</lastBuildDate><atom:link href="https://protiumx.dev/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>My profile website is now a terminal</title><link>https://protiumx.dev/blog/posts/006/</link><pubDate>Wed, 25 May 2022 11:42:13 +0200</pubDate><guid>https://protiumx.dev/blog/posts/006/</guid><description>When I was younger I used to think that my profile website would be a really cool, a full featured website, with shiny colors and animations; built with a cutting edge frontend technology&amp;hellip; Turns out that the older I get the more I prefer a simple terminal. No UI, just text and commands.
The last time I updated my profile website, it looked like this:
It was already pretty minimalistic, right?</description><content type="html"><![CDATA[<p>When I was younger I used to think that my profile website would be a really cool, a full featured website, with shiny colors and animations; built with a cutting edge frontend technology&hellip;
Turns out that the older I get the more I prefer a simple terminal. No UI, just text and commands.</p>
<p>The last time I updated my profile website, it looked like this:</p>
<p><img src="./last.png" alt="last profle website"></p>
<p>It was already pretty minimalistic, right? But not enough. No my profile website is just a terminal:</p>
<p><img src="./term.png" alt="terminal profile"></p>
<p>Let&rsquo;s see how this was possible.</p>
<h2 id="a-pragmatic-approach">A pragmatic approach</h2>
<p>A few days ago I was shaping this idea on my head and found this cool library: <a href="https://xtermjs.org/">xterms</a>. It&rsquo;s been used by a lot of apps, VS Code being among them. I decided to give it a try to see how complex could it be, so I headed to the <a href="https://xtermjs.org/docs/">docs</a> and started adding the code to my website. As you can see the docs are pretty good, they are surely autogenerated from TS docs but this is good because it means the code itself is well documented.</p>
<p>Before coding I set a few requirements:</p>
<ul>
<li>I don&rsquo;t want to use <code>npm</code> modules. I want my website source to be simple and minimal</li>
<li>I want to make use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">javascript modules</a> which are supported by all (relevant) browsers</li>
<li>The terminal commands should be abstract to allow me to remove or add commands at will with a few changes</li>
</ul>
<p>Then, how do I install <code>xtermjs</code> without using <code>npm</code>? The solution is simple, I host the files. I extracted the files from the npm packages with this command</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sh" data-lang="sh"><span style="display:flex;"><span>npm v xterm dist.tarball | xargs curl | tar -xz
</span></span></code></pre></div><p>and moved <code>package/lib/xterm.js</code> into <code>app/</code></p>
<p>To use javascript modules, I just needed to import the <code>main.js</code> file as module</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">script</span> <span style="color:#a6e22e">type</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;module&#34;</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;./app/main.js&#34;</span>&gt;&lt;/<span style="color:#f92672">script</span>&gt;
</span></span></code></pre></div><h2 id="terminal-commands">Terminal Commands</h2>
<p>Although not using <code>typescript</code> let&rsquo;s say that the terminal commands implement the following interface</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">Command</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">id</span>: <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">description</span>: <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">usage</span>: <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">args</span>: <span style="color:#66d9ef">number</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">run</span><span style="color:#f92672">:</span> (<span style="color:#a6e22e">terminal</span>: <span style="color:#66d9ef">Terminal</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Promise</span>&lt;<span style="color:#f92672">void</span>&gt;;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Then we need a command runner that will parse the user input</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-tsx" data-lang="tsx"><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">CommandRunner</span> {
</span></span><span style="display:flex;"><span>	(<span style="color:#a6e22e">term</span>: <span style="color:#66d9ef">Terminal</span>, <span style="color:#a6e22e">userInput</span>: <span style="color:#66d9ef">string</span>) <span style="color:#f92672">=&gt;</span> <span style="color:#a6e22e">Promise</span>&lt;<span style="color:#f92672">boolean</span>&gt;;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>The runner will return <code>false</code> if a command was not found.
Let&rsquo;s now define 1 command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lsCommand</span> <span style="color:#f92672">=</span>   {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;ls&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;list files&#39;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">usage</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;[usage]: ls filename&#39;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">args</span>: <span style="color:#66d9ef">0</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">async</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">term</span>, <span style="color:#a6e22e">args</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">file</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">files</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">file</span>.<span style="color:#a6e22e">name</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#39;\t\t&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  },
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><p>Now that we shaped the <code>command</code>, we can think of handling user input.</p>
<h2 id="terminal-basic-functionality">Terminal basic functionality</h2>
<p>The terminal should support:</p>
<ul>
<li>
<p>It should show a <code>prompt</code></p>
</li>
<li>
<p><code>ctrl + l</code>: should clear the terminal</p>
</li>
<li>
<p><code>ctrl + c</code>: should mean <code>SIGINT</code></p>
</li>
<li>
<p><code>enter</code>: should run a command from the current user input</p>
</li>
</ul>
<p>The terminal should also handle common errors:</p>
<ul>
<li>command not found</li>
<li>command with wrong arguments</li>
</ul>
<p>With this in mind we can start handling the user input.</p>
<p><code>xterm</code> provides a <code>onKey</code> event which receives a handler function <code>({ key, domEvent }) =&gt; void</code>, so we receive an event per each key press done by the user. This means that we need to track the user input and add each key as a char. When the user presses <code>enter</code> we should evaluate the input we have so far. Pretty straigt forward</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">userInput</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">keyCode</span> <span style="color:#f92672">==</span> <span style="color:#ae81ff">13</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">runCommand</span>(<span style="color:#a6e22e">term</span>, <span style="color:#a6e22e">userInput</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">userInput</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prompt</span>(<span style="color:#a6e22e">term</span>);
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">write</span>(<span style="color:#a6e22e">key</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">userInput</span> <span style="color:#f92672">+=</span> <span style="color:#a6e22e">key</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>NOTE:</strong> <code>xterm</code> doesn&rsquo;t render the user input, so we need to do it when it makes sense (not enter, not an arrow key, etc)</p>
<p>Handling the clear-screen can be implemented as</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">ctrlKey</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">key</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;l&#39;</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">clear</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>and <code>SIGINT</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">ctrlKey</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">ev</span>.<span style="color:#a6e22e">key</span> <span style="color:#f92672">===</span> <span style="color:#e6db74">&#39;c&#39;</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">prompt</span>(<span style="color:#a6e22e">term</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">userInput</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;&#39;</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>At this point we have a pretty basic working terminal, so let&rsquo;s add some more commands</p>
<h2 id="basic-commands">Basic commands</h2>
<p>What are the most known commands? For my terminal I want to be able to use <code>cat</code>, <code>ls</code>, <code>rm</code>, <code>exit</code>. But remember that this terminal is actually my profile website, so they should make sense in that context. So I decided the terminal should have a file system, where files are shaped like</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">File</span> {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">name</span>: <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">content</span>: <span style="color:#66d9ef">string</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">files</span> <span style="color:#f92672">=</span> [{ <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;about.md&#34;</span>, <span style="color:#a6e22e">content</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;once upon a time&#34;</span>}];
</span></span></code></pre></div><p>With this in mind, <code>cat</code> will print the file content, <code>ls</code> will print each file&rsquo;s name and <code>rm</code> will delete the file from the array.</p>
<p>For the <code>exit</code> command we can just close the window from javascript: <code>window.close()</code>.</p>
<p><img src="https://media.giphy.com/media/3knKct3fGqxhK/giphy.gif" alt="hacker man"></p>
<h2 id="going-further">Going further</h2>
<p>I have decided that I wanted to have a file named <code>blog.md</code> which should contain my last 5 posts.
To fetch this info, I used the RSS feed xml file generated by <a href="https://gohugo.io/">hugo</a> for my <a href="https://protiumx.dev/blog/">blog</a>. All I need to do is to fetch the file, parse the <code>xml</code> document and get the title and links of each post:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">async</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">fecthLastPosts</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;/blog/index.xml&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">text</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">text</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">parser</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">DOMParser</span>();
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">xmlDoc</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">parser</span>.<span style="color:#a6e22e">parseFromString</span>(<span style="color:#a6e22e">text</span>,<span style="color:#e6db74">&#34;text/xml&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">posts</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">xmlDoc</span>.<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;item&#39;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">lastPosts</span> <span style="color:#f92672">=</span> [];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">let</span> <span style="color:#a6e22e">i</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; <span style="color:#a6e22e">i</span> <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">5</span>; <span style="color:#a6e22e">i</span><span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">title</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">posts</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;title&#39;</span>)[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">childNodes</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">nodeValue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">link</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">posts</span>[<span style="color:#a6e22e">i</span>].<span style="color:#a6e22e">getElementsByTagName</span>(<span style="color:#e6db74">&#39;link&#39;</span>)[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">childNodes</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">nodeValue</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">lastPosts</span>.<span style="color:#a6e22e">push</span>(<span style="color:#a6e22e">title</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`\r\n</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">link</span><span style="color:#e6db74">}</span><span style="color:#e6db74">\r\n`</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">files</span>[<span style="color:#ae81ff">0</span>].<span style="color:#a6e22e">content</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">lastPosts</span>.<span style="color:#a6e22e">join</span>(<span style="color:#e6db74">&#39;\n&#39;</span>);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now <code>cat blog.md</code> prints my last 5 posts, and thanks to the <code>web link</code> addon of <code>xterm</code> each link is clickeable. Noice.
But why stopping here? Every <code>hackerman</code> terminal should have a <code>whoami</code> command. So this command will just print information about my self.</p>
<p>Also, cool web apps contain photos of cats, so I decided to write a <code>randc</code> command what will open a rando photo of a cat.
For this I found this amazing <a href="https://cataas.com/#/">rest API</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>  {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">id</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;randc&#34;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">description</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;get a random cat photo&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">args</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">async</span> <span style="color:#a6e22e">run</span>(<span style="color:#a6e22e">term</span>, <span style="color:#a6e22e">args</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">writeln</span>(<span style="color:#e6db74">&#39;getting a cato...&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">res</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;https://cataas.com/cat?json=true&#39;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">ok</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">writeln</span>(<span style="color:#e6db74">`[error] no catos today :( -- </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">statusText</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>));
</span></span><span style="display:flex;"><span>      }  <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> { <span style="color:#a6e22e">url</span> } <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">json</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">term</span>.<span style="color:#a6e22e">writeln</span>(<span style="color:#a6e22e">colorize</span>(<span style="color:#a6e22e">TermColors</span>.<span style="color:#a6e22e">Green</span>, <span style="color:#e6db74">&#39;opening cato...&#39;</span>));
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">sleep</span>(<span style="color:#ae81ff">1000</span>);
</span></span><span style="display:flex;"><span>        window.<span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#39;https://cataas.com&#39;</span> <span style="color:#f92672">+</span> <span style="color:#a6e22e">url</span>);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>    },
</span></span><span style="display:flex;"><span>  },
</span></span></code></pre></div><p>The result:</p>
<p><img src="./randc.gif" alt="get a cat"></p>
<p>I think this should do it for a <code>profile terminal</code>. I&rsquo;m very satisfied with the simplicity of it and the commands I have implemented.
I&rsquo;ll problaly add more commands in the future and also implement <code>streams</code> , just for fun.</p>
<p>What command would you add to yout <strong>profile terminal</strong>?</p>
<p>Other articles:</p>
<ul>
<li><a href="https://protiumx.github.io/blog/posts/publish-your-blog-articles-with-this-github-action/">Publish your blog articles everywhere with this github action</a></li>
<li><a href="https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest-rs/">An HTTP request parser with rust and pest.rs</a></li>
</ul>
<p>👽</p>
]]></content></item><item><title>An HTTP request parser with rust and pest.rs</title><link>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest-rs/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest-rs/</guid><description>Introduction I happened to have learned about parsing expression grammars a few days ago and got really excited about writing my own grammar. As I was missing this VS Code extension when working on neovim, an idea popped up: What if I write an HTTP grammar and an execute request from an interactive prompt?
Preview:
Preparation For our grammar, we need to make sure we understand the HTTP standard defined here.</description><content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I happened to have learned about <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">parsing expression grammars</a> a few days ago and got really excited about writing my own grammar.
As I was missing this <a href="https://github.com/Huachao/vscode-restclient">VS Code extension</a> when working on <code>neovim</code>, an idea popped up:
<strong>What if I write an HTTP grammar and an execute request from an interactive prompt?</strong></p>
<p>Preview:</p>
<p><img src="./preview.gif" alt="preview"></p>
<h2 id="preparation">Preparation</h2>
<p>For our grammar, we need to make sure we understand the HTTP standard defined <a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html">here</a>.</p>
<pre tabindex="0"><code>Request = Request-Line ; Section 5.1
        *(( general-header        ; Section 4.5
         | request-header         ; Section 5.3
         | entity-header ) CRLF)  ; Section 7.1
        CRLF
        [ message-body ]          ; Section 4.3
</code></pre><p>Let&rsquo;s breakout the definition</p>
<h3 id="request">Request</h3>
<p>A <code>Request</code> is conformed by a <code>Request-Line</code> optionally followed by <code>headers</code> and a new line (a <strong>Carriage Return</strong> and <strong>Line Feed</strong>) then another new line. After the <code>headers</code> we find the <code>message-body</code>.</p>
<h3 id="request-line">Request-Line</h3>
<pre tabindex="0"><code>Request-Line = Method SP Request-URI SP HTTP-Version CRLF
</code></pre><p>Here we should fine a <code>Method</code> followed by a white space. Then the <code>Request-URI</code> followed by a white space. Finally the <code>HTTP-Version</code>.</p>
<p>An example of a request can be <code>GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.\r\n</code> (note the end of the line)</p>
<h3 id="request-header">Request-Header</h3>
<p>Defined as</p>
<pre tabindex="0"><code>equest-header = Accept                   ; Section 14.1
      | Accept-Charset           ; Section 14.2
      | Accept-Encoding          ; Section 14.3
      | Accept-Language          ; Section 14.4
      | Authorization            ; Section 14.8
      | Expect                   ; Section 14.20
      | From                     ; Section 14.22
      | Host                     ; Section 14.23
      | If-Match                 ; Section 14.24
      | If-Modified-Since        ; Section 14.25
      | If-None-Match            ; Section 14.26
      | If-Range                 ; Section 14.27
      | If-Unmodified-Since      ; Section 14.28
      | Max-Forwards             ; Section 14.31
      | Proxy-Authorization      ; Section 14.34
      | Range                    ; Section 14.35
      | Referer                  ; Section 14.36
      | TE                       ; Section 14.39
      | User-Agent               ; Section 14.43
</code></pre><p>let&rsquo;s open one of those sections to check the format.</p>
<pre tabindex="0"><code>Authorization = &#34;Authorization&#34; &#34;:&#34; credentials
</code></pre><p>Basically this header is the word <code>Authorization</code> followed by <code>:</code> and then the <code>credentials</code>.</p>
<h3 id="message-body">Message-Body</h3>
<pre tabindex="0"><code>message-body = entity-body
                    | &lt;entity-body encoded as per Transfer-Encoding&gt;
</code></pre><p>For simplicity let&rsquo;s assume that the <code>body</code> can be <strong>anything</strong> that is not a request line nor a header.</p>
<p>Now we have enough information to write our http grammar, more specific a set of <strong>rules</strong>.</p>
<h2 id="pest">Pest</h2>
<p>To write our grammar we will use <a href="https://pest.rs/">pest</a>. From the website:</p>
<blockquote>
<p>pest is a general purpose parser written in Rust with a focus on <strong>accessibility</strong>, <strong>correctness</strong>, and <strong>performance</strong>. It uses <a href="https://en.wikipedia.org/wiki/Parsing_expression_grammar">parsing expression grammars (or PEG)</a> as input, which are similar in spirit to regular expressions, but which offer the enhanced expressivity needed to parse complex languages.</p>
</blockquote>
<p>Sounds great!</p>
<p>Pest has its <a href="https://pest.rs/book/grammars/syntax.html">own syntax</a> for writing grammar rules. A <strong>rule</strong> is defined as follows:</p>
<pre tabindex="0"><code>my_rule = { ... }
</code></pre><p>Let&rsquo;s create a new rule <code>my_rule= { &quot;test&quot; }</code>. This rule will match the word <code>test</code> inside an <strong>input</strong>. So if we want to parse a file that only contains &ldquo;test&rdquo; or new lines  we need to define the shape of a line with the delimiters <code>SOI</code> and <code>EOI</code> (start and end of input respectively)</p>
<pre tabindex="0"><code>testy_file = {
    SOI
    ~ (my_rule | NEWLINE)*
    ~ EOI
}
</code></pre><p>Let&rsquo;s test this out in the online grammar editor:</p>
<p><img src="./pest-editor.png" alt="editor"></p>
<p>The parser has identified a <code>testy_file</code> that contains to matches for the rule <code>my_rule</code>. So far so good.</p>
<h2 id="http-grammar">HTTP Grammar</h2>
<p>Now we are ready for writing our grammar (are we?). We need to write this grammar as close as possible to the standard, since it&rsquo;s defined in a similar way, with <strong>rules</strong>. We can imagine something like this</p>
<pre tabindex="0"><code>request = {	
	request_line ~
    headers? ~
    NEWLINE ~
    body?
}
</code></pre><p>Our <code>request</code> rule says: a <code>request_line</code> optionally followed by <code>headers</code> followed by a new line, then optionally followed by the <code>body</code>. With optionally I make reference to the <code>?</code> mark which is a repetition operator (those who are familiar with regex expressions should understand this right away) and means that something <code> can occur zero or one times</code>.
For our <code>request_line</code> we will match the standard as follows:</p>
<pre tabindex="0"><code>request_line = _{ method ~ &#34; &#34;+ ~ uri ~ &#34; &#34;+ ~ &#34;HTTP/&#34; ~ version ~ NEWLINE }
</code></pre><p>We are talking about a <code>method</code> followed by a blank space then the <code>uri</code> then another blank space then the <code>http version</code> followed by a <code>NEWLINE</code>. <code>NEWLINE</code> is a pest built-in rule that matches <code>&quot;\n&quot; | &quot;\r\n&quot; | &quot;\r&quot;</code>.</p>
<p>Let&rsquo;s break the request line.</p>
<p>For <code>method</code> we just need to match any of the http methods defined in the standard</p>
<pre tabindex="0"><code>Method = &#34;OPTIONS&#34;                ; Section 9.2
        | &#34;GET&#34;                    ; Section 9.3
        | &#34;HEAD&#34;                   ; Section 9.4
        | &#34;POST&#34;                   ; Section 9.5
        | &#34;PUT&#34;                    ; Section 9.6
        | &#34;DELETE&#34;                 ; Section 9.7
        | &#34;TRACE&#34;                  ; Section 9.8
        | &#34;CONNECT&#34;                ; Section 9.9
</code></pre><p>Therefore our method rule should be</p>
<pre tabindex="0"><code>method = { (&#34;GET&#34; | &#34;DELETE&#34; | &#34;POST&#34; | &#34;PUT&#34; | ...) }
</code></pre><p>Here our rule says: match the exact word <code>GET</code> or <code>DELETE</code> or &hellip; you get the idea.</p>
<p>Next, for simplicity purpuses, we will say that the <code>uri</code> is anything that is <strong>not</strong> a blank space</p>
<pre tabindex="0"><code>uri = { (!whitespace ~ ANY)+ }
whitespace = _{ &#34; &#34; | &#34;\t&#34; }
</code></pre><p><strong>Note:</strong> here we also defined that the <code>white space</code> can be a space or a tab. Note that <code>_</code> means that the rule is <a href="https://pest.rs/book/grammars/syntax.html#silent-and-atomic-rules">silent</a>; it does not produce tokens.</p>
<p>The HTTP version goes like:</p>
<pre tabindex="0"><code>version = { (ASCII_DIGIT | &#34;.&#34;)+ }
</code></pre><p>Meaning: any digit or a dot character. In our <code>request_line</code> the version is defined as the word &ldquo;HTTP/&rdquo; followed by the <code>version</code>.</p>
<p>Finally, we require a <code>NEWLINE</code> at the end of our request line.</p>
<p>Let&rsquo;s test this out on the editor.</p>
<p><img src="./request-line.png" alt="request line"></p>
<p>Perfect! Note that the <code>whitespace</code> rule does not produce a token, we only see <code>method</code>, <code>uri</code> and <code>version</code>. Let&rsquo;s continue with the headers.</p>
<pre tabindex="0"><code>header = { header_name ~ &#34;:&#34; ~ whitespace ~ header_value ~ NEWLINE }
header_name = { (!(&#34;:&#34; | NEWLINE) ~ ANY)+ }
header_value = { (!NEWLINE ~ ANY)+ }
</code></pre><p>In here we say that a <code>header_name</code> is anything except for <code>:</code> , because this character is a <strong>header separator</strong>, it delimits the header name. We also don&rsquo;t want a new line, we will see why bellow.
The name is followed by the separator <code>:</code> and then 1 white space.
The <code>header_value</code> is anything except for a <strong>new line</strong>, because the new line delimits a <code>header</code>. After the value we encounter a new line.</p>
<p>Let&rsquo;s test this again:</p>
<p><img src="./headers.png" alt="headers"></p>
<p>Here we can se that the parser matches 1 header as <code>{ header_name: &quot;auth&quot;, header_value: &quot;token&quot; }</code>. Did you notice that it also say <code>headers &gt; header</code> ? That is because we also want a rule that can matches a 1 or more <code>header</code> rules. We define this rule as:</p>
<pre tabindex="0"><code>headers = { header+ }
</code></pre><p>This way the pest parser will produce a token <code>headers</code> with a list of <code>header</code> matches.</p>
<p>Lastly the body:</p>
<pre tabindex="0"><code>body = { ANY+ }
</code></pre><p>The body is anything after the headers</p>
<p><img src="./body.png" alt="body"></p>
<p>So far our grammar can parse 1 request from the input. Coming back to the original idea for this post, we want to be able to parse multiple http requests from a file. But here we have a conflict because our <code>body</code> rule will match anything after the headers, and that anything can be another request.
To solve this problem we need the help of a ✨ delimiter ✨</p>
<h2 id="the-http-file-syntax">The .http file syntax</h2>
<p>To delimit each http request in our file we will make use of 3 <code>#</code> symbols (as the VS Code rest client does).
Let&rsquo;s go add this to our grammar:</p>
<pre tabindex="0"><code>delimiter = { &#34;#&#34;{3} ~ NEWLINE+ }
</code></pre><p>Our delimiter is exactly 3 number signs followed by 1 or more new lines. Then we can say that the <code>body</code> is anything except for a delimiter:</p>
<pre tabindex="0"><code>body = { (!delimiter ~ ANY)+ }
</code></pre><p>Let&rsquo;s test this:</p>
<p><img src="./multiple.png" alt="multiple requests"></p>
<p>Nice! So finally we can define what our http file should look like:</p>
<pre tabindex="0"><code>file = { SOI ~ (delimiter | request)* ~ EOI}
</code></pre><p>Our http file is composed by delimiters or requests, 0 or more of them.
We have completed our http grammar, now it&rsquo;s time to get <strong>rusty</strong></p>
<p><img src="./schwifty.jpeg" alt="get schwifty"></p>
<h2 id="parsing-http-files">Parsing http files</h2>
<p>We will refer to <a href="https://pest.rs/book/examples/ini.html">this example</a> for setting up the base code</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> pest;
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[macro_use]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">extern</span> <span style="color:#66d9ef">crate</span> pest_derive;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">use</span> pest::Parser;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Parser)]</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[grammar = </span><span style="color:#e6db74">&#34;grammar.pest&#34;</span><span style="color:#75715e">]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">HttpParser</span>;
</span></span></code></pre></div><p>We will use the following file for testing</p>
<pre tabindex="0"><code>GET https://protiumx.github.io HTTP/1.1
authorization: token

###

POST https://rq-rust.free.beeceptor.com/api HTTP/1.1

{
  &#34;hello&#34;: &#34;hola&#34;
}
</code></pre><p><strong>Note:</strong> I set up a mock api in <a href="https://beeceptor.com/">https://beeceptor.com/</a>. It might not be available by the time you are reading this. But you can use any endpoint that accepts <strong>POST</strong>.</p>
<p>Let&rsquo;s go ahead an parse the file</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> unparsed_file <span style="color:#f92672">=</span> fs::read_to_string(<span style="color:#e6db74">&#34;test.http&#34;</span>).expect(<span style="color:#e6db74">&#34;cannot read file&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> file <span style="color:#f92672">=</span> INIParser::parse(Rule::file, <span style="color:#f92672">&amp;</span>unparsed_file)
</span></span><span style="display:flex;"><span>        .expect(<span style="color:#e6db74">&#34;unsuccessful parse&#34;</span>) <span style="color:#75715e">// unwrap the parse result
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        .next().unwrap(); <span style="color:#75715e">// get and unwrap the `file` rule; never fails
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>		println!(<span style="color:#e6db74">&#34;{:#?}&#34;</span>, file);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>we get:</p>
<pre tabindex="0"><code>Pair {
    rule: file,
    span: Span {
        str: &#34;GET https://protiumx.github.io HTTP/1.1\nauthorzation: token\n\n###\n\nPOST https://rq-rust.free.beeceptor.com/api HTTP/1.1\n\n{\n  \&#34;hello\&#34;: \&#34;hola\&#34;\n}\n&#34;,
        start: 0,
        end: 142,
    },
    inner: [
        Pair {
            rule: request,
            span: Span {
                str: &#34;GET https://protiumx.github.io HTTP/1.1\nauthorzation: token\n\n&#34;,
                start: 0,
                end: 61,
            },
            inner: [
                Pair {
                    rule: method,
                    span: Span {
                        str: &#34;GET&#34;,
                        start: 0,
                        end: 3,
                    },
                    inner: [],
                },
...
</code></pre><p>The <code>Pair</code> struct has a pretty clear structure and we could use to print each inner <code>Pair</code>. But we want to get rusty so we will put some effort.</p>
<p>We will define an <code>HttpFile</code> struct. This struct will contain a vector of <code>HttpRequest</code>.
Let&rsquo;s define them:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">use</span> std::collections::HashMap;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">enum</span> <span style="color:#a6e22e">HttpMethod</span> {
</span></span><span style="display:flex;"><span>    Get,
</span></span><span style="display:flex;"><span>    Post,
</span></span><span style="display:flex;"><span>    Put,
</span></span><span style="display:flex;"><span>    Delete,
</span></span><span style="display:flex;"><span>  	<span style="color:#75715e">// ...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">HttpRequest</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> method: <span style="color:#a6e22e">HttpMethod</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> url: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> version: String,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> headers: <span style="color:#a6e22e">HashMap</span><span style="color:#f92672">&lt;</span>String, String<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> body: String,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#[derive(Debug)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">HttpFile</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> requests: Vec<span style="color:#f92672">&lt;</span>HttpRequest<span style="color:#f92672">&gt;</span>,
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>And to get even more rusty we will implement the <code>TryFrom</code> trait to each struct. Let&rsquo;s implement it for the <code>HttpFile</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;&#39;</span><span style="color:#a6e22e">i</span><span style="color:#f92672">&gt;</span> TryFrom<span style="color:#f92672">&lt;</span>Pair<span style="color:#f92672">&lt;&#39;</span><span style="color:#a6e22e">i</span>, Rule<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">for</span> HttpFile {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Error</span> <span style="color:#f92672">=</span> Error<span style="color:#f92672">&lt;</span>Rule<span style="color:#f92672">&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">try_from</span>(pair: <span style="color:#a6e22e">Pair</span><span style="color:#f92672">&lt;</span>Rule<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>Self, Self::Error<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> iterator <span style="color:#f92672">=</span> pair.into_inner();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> requests <span style="color:#f92672">=</span> vec![];
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#66d9ef">in</span> iterator {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">match</span> item.as_rule() {
</span></span><span style="display:flex;"><span>                Rule::EOI <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                Rule::request <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    requests.push(item.try_into()<span style="color:#f92672">?</span>);
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                _ <span style="color:#f92672">=&gt;</span> {}
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        Ok(Self { requests })
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><strong>Note:</strong> <code>Pair&lt;'i, Rule&gt;</code> has the lifetime of the <code>input</code>.
As we know, the <code>file</code> rule can contain 0 or more of (delimiter | request). This means that in its content we can find: delimiter, request or End of File.
Here we will <strong>try</strong> to parse each request, so we need the <code>TryFrom</code> trait for the <code>HttpRequest</code> struct</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">impl</span><span style="color:#f92672">&lt;&#39;</span><span style="color:#a6e22e">i</span><span style="color:#f92672">&gt;</span> TryFrom<span style="color:#f92672">&lt;</span>Pair<span style="color:#f92672">&lt;&#39;</span><span style="color:#a6e22e">i</span>, Rule<span style="color:#f92672">&gt;&gt;</span> <span style="color:#66d9ef">for</span> HttpRequest {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">type</span> <span style="color:#a6e22e">Error</span> <span style="color:#f92672">=</span> Error<span style="color:#f92672">&lt;</span>Rule<span style="color:#f92672">&gt;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">try_from</span>(pair: <span style="color:#a6e22e">Pair</span><span style="color:#f92672">&lt;&#39;</span><span style="color:#a6e22e">i</span>, Rule<span style="color:#f92672">&gt;</span>) -&gt; Result<span style="color:#f92672">&lt;</span>Self, Self::Error<span style="color:#f92672">&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> iterator <span style="color:#f92672">=</span> pair.into_inner();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> ret <span style="color:#f92672">=</span> Self {
</span></span><span style="display:flex;"><span>            method: <span style="color:#a6e22e">iterator</span>.next().unwrap().try_into()<span style="color:#f92672">?</span>,
</span></span><span style="display:flex;"><span>            url: <span style="color:#a6e22e">iterator</span>.next().unwrap().as_str().to_string(),
</span></span><span style="display:flex;"><span>            version: <span style="color:#a6e22e">iterator</span>.next().unwrap().as_str().to_string(),
</span></span><span style="display:flex;"><span>            headers: <span style="color:#a6e22e">HashMap</span>::new(),
</span></span><span style="display:flex;"><span>            body: String::new(),
</span></span><span style="display:flex;"><span>        };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#66d9ef">in</span> iterator {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">match</span> item.as_rule() {
</span></span><span style="display:flex;"><span>                Rule::headers <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    ret.parse_headers(item.into_inner());
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                Rule::body <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    ret.body <span style="color:#f92672">=</span> item.as_str().to_string();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>                _ <span style="color:#f92672">=&gt;</span> {
</span></span><span style="display:flex;"><span>                    unreachable!();
</span></span><span style="display:flex;"><span>                }
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Ok(ret)
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p><img src="./egghead.jpeg" alt="egghead"></p>
<p>Each <code>request</code> can have 5 inner matches: method, url, version, headers and body.
The first 3 do not have inner rules, so we can just extract them as <code>&amp;str</code>. After this, the iterator can only have <code>headers</code> or <code>body</code> pairs. For the <code>headers</code> we perform a similar operation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> HttpRequest {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">parse_headers</span>(<span style="color:#f92672">&amp;</span><span style="color:#66d9ef">mut</span> self, pairs: <span style="color:#a6e22e">Pairs</span><span style="color:#f92672">&lt;</span>Rule<span style="color:#f92672">&gt;</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> item <span style="color:#66d9ef">in</span> pairs {
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> kv <span style="color:#f92672">=</span> item.into_inner();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> key <span style="color:#f92672">=</span> kv.next().unwrap().as_str().to_string();
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">let</span> value <span style="color:#f92672">=</span> kv.next().unwrap().as_str().to_string();
</span></span><span style="display:flex;"><span>            self.headers.insert(key, value);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Grapes! We are pretty much done with the parser. Now let&rsquo;s use the parsed content to make the requests.</p>
<h2 id="reqwest">reqwest</h2>
<p>After a quick check of the available rust http client libraries I opted for <a href="https://crates.io/crates/reqwest">reqwest</a>. It has a pretty simple API and it seems to be among the most used libraries for this matters. But I&rsquo;m a bit concerned about all its dependencies so I might try <a href="https://github.com/algesten/ureq">ureq</a> later.</p>
<p>For this part I just followed the examples on the docs website and ended up with this code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span><span style="color:#75715e">#[derive(Default)]</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">struct</span> <span style="color:#a6e22e">HttpClient</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> client: <span style="color:#a6e22e">reqwest</span>::blocking::Client,
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">impl</span> HttpClient {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">new</span>() -&gt; <span style="color:#a6e22e">Self</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> <span style="color:#66d9ef">mut</span> headers <span style="color:#f92672">=</span> header::HeaderMap::new();
</span></span><span style="display:flex;"><span>        headers.insert(
</span></span><span style="display:flex;"><span>            header::CONTENT_TYPE,
</span></span><span style="display:flex;"><span>            header::HeaderValue::from_static(<span style="color:#e6db74">&#34;application/json&#34;</span>),
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>        headers.insert(
</span></span><span style="display:flex;"><span>            header::ACCEPT,
</span></span><span style="display:flex;"><span>            header::HeaderValue::from_static(<span style="color:#e6db74">&#34;application/json&#34;</span>),
</span></span><span style="display:flex;"><span>        );
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> client <span style="color:#f92672">=</span> reqwest::blocking::Client::builder()
</span></span><span style="display:flex;"><span>            .timeout(Duration::from_secs(<span style="color:#ae81ff">10</span>))
</span></span><span style="display:flex;"><span>            .default_headers(headers)
</span></span><span style="display:flex;"><span>            .no_gzip()
</span></span><span style="display:flex;"><span>            .build()
</span></span><span style="display:flex;"><span>            .unwrap();
</span></span><span style="display:flex;"><span>        HttpClient { client }
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">pub</span> <span style="color:#66d9ef">fn</span> <span style="color:#a6e22e">execute</span>(<span style="color:#f92672">&amp;</span>self, req: <span style="color:#66d9ef">&amp;</span><span style="color:#a6e22e">HttpRequest</span>) -&gt; Result<span style="color:#f92672">&lt;</span>(), Box<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">dyn</span> std::error::Error<span style="color:#f92672">&gt;&gt;</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> request <span style="color:#f92672">=</span> self
</span></span><span style="display:flex;"><span>            .client
</span></span><span style="display:flex;"><span>            .request(Method::from_str(req.method.to_string().as_str())<span style="color:#f92672">?</span>, <span style="color:#f92672">&amp;</span>req.url);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> headers: <span style="color:#a6e22e">header</span>::HeaderMap <span style="color:#f92672">=</span> (<span style="color:#f92672">&amp;</span>req.headers).try_into()<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> body <span style="color:#f92672">=</span> req.body.clone();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">let</span> res <span style="color:#f92672">=</span> request.headers(headers).body(body).send()<span style="color:#f92672">?</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        println!(<span style="color:#e6db74">&#34;{}\n&#34;</span>, res.text()<span style="color:#f92672">?</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        Ok(())
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>What we can see in here:</p>
<ul>
<li>Use the <code>ClientBuilder</code> to add some default headers and config for the request</li>
<li>Parse our <code>HttpMethod</code> into <code>reqwest::Method</code>. <strong>Note:</strong> <code>HttpMethod</code> implements the <code>Display</code> trait.</li>
<li>Parse our <code>HashMap&lt;String, String</code> of headers into <code>reqwest::header::HeaderMap</code>. This is possible because it implements the <code>TryFrom&lt;HashMap&lt;String, String&gt;&gt;</code> trait.</li>
<li>Finally clone the body and send the request. We output the body of the request as <code>text</code> (this consumes the body)</li>
</ul>
<p><strong>Note:</strong> We are not trimming the body, perhaps we should.</p>
<p>No we are ready for the last part: the interactive prompt</p>
<h2 id="lazyness-kicks-in">Lazyness kicks in</h2>
<p>At this point I felt a bit lazy to implement the prompt so I searched for existing solutions, one of them being <a href="https://github.com/mikaelmello/inquire">inquire</a>. It has a pretty straight forward API, so to show an interactive select we just need this lines:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-rust" data-lang="rust"><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> http_file <span style="color:#f92672">=</span> parse(<span style="color:#f92672">&amp;</span>file_content).unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> request <span style="color:#f92672">=</span> Select::new(<span style="color:#e6db74">&#34;Select requests to execute:&#34;</span>, http_file.requests)
</span></span><span style="display:flex;"><span>        .prompt()
</span></span><span style="display:flex;"><span>        .unwrap();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">let</span> client <span style="color:#f92672">=</span> HttpClient::new();
</span></span><span style="display:flex;"><span>    client.execute(<span style="color:#f92672">&amp;</span>request)<span style="color:#f92672">?</span>;
</span></span></code></pre></div><p>Note that the <code>HttpRequest</code> implements the <code>Display</code> trait.</p>
<p>The result:</p>
<p><img src="./prompt.png" alt="prompt"></p>
<p>Gorgeous.</p>
<h2 id="unintroduction">Unintroduction</h2>
<p>This project turned out to be quite fun! I ended up naming it <code>rq</code> and you can see its source <a href="https://github.com/protiumx/rq/">here</a></p>
<p>My goal is to have a full interactive prompt that allows you to execute many request without existing the prompt mode.
If you would like to collaborate I have created a few TODO cards <a href="https://github.com/protiumx/rq/projects/1">here</a>.</p>
<p>That&rsquo;s it. Thanks for reading 👽</p>
<p>Others posts:</p>
<p>Related articles:</p>
<ul>
<li><a href="https://protiumx.dev/blog/posts/publish-your-blog-articles-with-this-github-action/">Publish your blog articles everywhere with this github action</a></li>
<li><a href="https://dev.to/protium/coding-problems-tdd-and-ci-282n">Coding Problems, TDD, and CI</a></li>
<li><a href="https://dev.to/protium/your-new-pretty-and-minimalist-resume-with-latex-421j">Your new pretty and minimalist resume with LaTex</a></li>
</ul>
]]></content></item><item><title>Automate an articles section in your github.io page</title><link>https://protiumx.dev/blog/posts/automate-an-articles-section-in-your-github-io-page/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/automate-an-articles-section-in-your-github-io-page/</guid><description>Today I wanted to update my github page to show a list of my last Medium articles. I ended up automating it.
First approach My first attempt was fetching the RSS feed using the URL medium.com/feed/@username and parse the xml document. But I was hit with a charming CORS error. Now what?
I remembered that I&amp;rsquo;m using a github action to update a similar section on my github profile. So, what if I tell this action that the README file is called index.</description><content type="html"><![CDATA[<p>Today I wanted to update my <a href="https://protiumx.github.io/">github page</a> to show a list of my
last Medium <a href="https://medium.com/@protiumx">articles</a>. I ended up automating it.</p>
<h2 id="first-approach">First approach</h2>
<p>My first attempt was fetching the RSS feed using the URL <code>medium.com/feed/@username</code> and parse
the <code>xml</code> document. But I was hit with a charming <code>CORS</code> error.
Now what?</p>
<p>I remembered that I&rsquo;m using a github action to update a similar section on my <a href="https://github.com/protiumx">github profile</a>.
So, what if I tell this action that the README file is called <code>index.html</code>?</p>
<h2 id="blog-post-workflow">blog-post-workflow</h2>
<p>The <a href="https://github.com/gautamkrishnar/blog-post-workflow">github action</a> supports a <code>readme_path</code> parameter. After
a quick dive in its source code I noticed that this file could be anything, not necessarily a markdown file. Problem solved!</p>
<p>Let&rsquo;s add the articles section into the html:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">section</span> <span style="color:#a6e22e">class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;content__articles&#34;</span>&gt;
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">p</span>&gt;&amp;gt; last published articles:&lt;/<span style="color:#f92672">p</span>&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  &lt;<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!-- BLOG-POST-LIST:START --&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">&lt;!-- BLOG-POST-LIST:END --&gt;</span>
</span></span><span style="display:flex;"><span>  &lt;/<span style="color:#f92672">ul</span>&gt;
</span></span><span style="display:flex;"><span>&lt;/<span style="color:#f92672">section</span>&gt;
</span></span></code></pre></div><p>Since the action is intended for markdown files, the default template for the posts links is <code>[title](url)</code> but we need html code.
Luckily the github action also provides a <code>template</code> param. So let&rsquo;s change the template to generate list items:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">li</span>&gt;&lt;<span style="color:#f92672">a</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;$url&#34;</span> <span style="color:#a6e22e">target</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;_blank&#34;</span>&gt;$title&lt;/<span style="color:#f92672">a</span>&gt;&lt;/<span style="color:#f92672">li</span>&gt;$newline
</span></span></code></pre></div><p>That&rsquo;s it!</p>
<p>Our workflow configuration should be:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Update Medium articles</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">schedule</span>:
</span></span><span style="display:flex;"><span>    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;0 0 * * 0&#39;</span> <span style="color:#75715e"># Runs once a week</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">workflow_dispatch</span>:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">update-articles-section</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v3</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">gautamkrishnar/blog-post-workflow@master</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">env</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">GITHUB_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">feed_list</span>: <span style="color:#e6db74">&#34;https://medium.com/feed/@protiumx&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">readme_path</span>: <span style="color:#e6db74">&#34;./index.html&#34;</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">template</span>: <span style="color:#e6db74">&#39;&lt;li&gt;&lt;a href=&#34;$url&#34; target=&#34;_blank&#34;&gt;$title&lt;/a&gt;&lt;/li&gt;$newline&#39;</span>
</span></span></code></pre></div><p>Check the file <a href="https://github.com/protiumx/protiumx.github.io/blob/main/.github/workflows/medium-articles.yml">here</a>.
NOTE: I added the <code>workflow_dispatch</code> trigger so I can trigger the action from the github UI.</p>
<p>That&rsquo;s all. I few lines of code and we added an automated section for our github page (or any page).</p>
<p>Related articles:</p>
<ul>
<li><a href="https://protiumx.dev/blog/posts/publish-your-blog-articles-with-this-github-action/">Publish your blog articles everywhere with this github action</a></li>
</ul>
<p>👽</p>
]]></content></item><item><title>kitty + zsh + powerlevel10k = ✨ aesthetics ✨</title><link>https://protiumx.dev/blog/posts/kitty-zsh-powerlevel10k-aesthetics/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/kitty-zsh-powerlevel10k-aesthetics/</guid><description>Who doesn&amp;rsquo;t like a good looking terminal and useful layouts and keymaps? This has always been my goal since I started using linux as main OS.
I have used lots of different terminals, plugins and settings over the years but I think now I achieved the glory with my current setup:
Let&amp;rsquo;s have a look to the configuration.
What do I use? Terminal: Kitty Shell: zsh zsh config management: Oh my Zsh!</description><content type="html"><![CDATA[<p>Who doesn&rsquo;t like a good looking terminal and useful layouts and keymaps?
This has always been my goal since I started using linux as main OS.</p>
<p>I have used lots of different terminals, plugins and settings over the years but I think now
I achieved the glory with my current setup:</p>
<p><img src="./setup.png" alt="setup"></p>
<p>Let&rsquo;s have a look to the configuration.</p>
<h2 id="what-do-i-use">What do I use?</h2>
<ul>
<li>Terminal: <a href="https://sw.kovidgoyal.net/kitty/">Kitty</a></li>
<li>Shell: <code>zsh</code></li>
<li>zsh config management: <a href="https://ohmyz.sh/">Oh my Zsh!</a></li>
<li>zsh theme: <a href="https://github.com/romkatv/powerlevel10k">powerlevel10k</a></li>
<li>editor: <a href="https://neovim.io/">neovim</a></li>
</ul>
<h2 id="configuration">Configuration</h2>
<h3 id="terminal">Terminal</h3>
<p>To achieve a clean look in the terminal, I changed the opacity of kitty, removed the window title bar,
and changed margins. Here the configuration needed:</p>
<pre tabindex="0"><code>background_opacity 0.76
draw_minimal_borders yes
window_padding_width 2
window_border_width 0
hide_window_decorations yes
titlebar-only yes
active_border_color none
</code></pre><p>I have also added changes for the tabs bar in order to make it look minimalist:</p>
<pre tabindex="0"><code>tab_bar_edge top
tab_bar_background none
tab_bar_style powerline
tab_powerline_style slanted
tab_title_template &#34;{fmt.fg.c2c2c2}{title}&#34;

active_tab_title_template &#34;{fmt.fg._fff}{title}&#34;
active_tab_foreground #fff
active_tab_font_style bold-italic
active_tab_background #8631B4

inactive_tab_foreground #c2c2c2
inactive_tab_background #8631B4
</code></pre><p>In order to move quick between splits I added the following mappings:</p>
<pre tabindex="0"><code>map cmd+shift+up neighboring_window up
map cmd+shift+left neighboring_window left
map cmd+shift+right neighboring_window right
map cmd+shift+down neighboring_window down
</code></pre><h3 id="powerlevel10k">powerlevel10k</h3>
<p>There is not much to mention here since I have used the powerlevel10k script to configure it.
Once you install powerlevel10k it should init the configuration wizard. If you want to re-configure
do so by running <code>p10k configure</code> in your terminal.</p>
<p>You can check my powerlevel10k config file <a href="https://github.com/protiumx/.dotfiles/blob/main/stow/zsh/.p10k.zsh">here</a>.</p>
<h3 id="neovim">neovim</h3>
<p>Plugins:</p>
<ul>
<li><a href="https://github.com/vim-airline/vim-airline">vim-airline</a></li>
</ul>
<p>In this case, I got rid of many highlights background colors</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-vim" data-lang="vim"><span style="display:flex;"><span><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">LineNr</span> <span style="color:#a6e22e">ctermbg</span>=<span style="color:#a6e22e">none</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">Normal</span> <span style="color:#a6e22e">ctermbg</span>=<span style="color:#a6e22e">none</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">NonText</span> <span style="color:#a6e22e">ctermbg</span>=<span style="color:#a6e22e">none</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">SignColumn</span> <span style="color:#a6e22e">ctermbg</span>=<span style="color:#a6e22e">none</span><span style="color:#960050;background-color:#1e0010">
</span></span></span><span style="display:flex;"><span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">VertSplit</span> <span style="color:#a6e22e">ctermbg</span>=<span style="color:#a6e22e">none</span> <span style="color:#a6e22e">ctermfg</span>=<span style="color:#ae81ff">98</span> <span style="color:#a6e22e">cterm</span>=<span style="color:#a6e22e">none</span><span style="color:#960050;background-color:#1e0010">
</span></span></span></code></pre></div><p>I have also setup a color column to show a visual limit at 100 chars</p>
<pre tabindex="0"><code>set colorcolumn=100
highlight ColorColumn ctermbg=93
</code></pre><p>My vim-airline config goes like this:</p>
<pre tabindex="0"><code class="language-vim-script" data-lang="vim-script">let g:airline_theme=&#39;selenized_bw&#39;

&#34; Show git branch
let g:airline#extensions#branch#enabled=1

let g:airline#extensions#hunks#enabled=0
let g:airline_powerline_fonts=1
let g:airline_detect_spell=0

&#34; Short version for modes
let g:airline_mode_map = {
      \ &#39;__&#39;     : &#39;-&#39;,
      \ &#39;c&#39;      : &#39;C&#39;,
      \ &#39;i&#39;      : &#39;I&#39;,
      \ &#39;ic&#39;     : &#39;I&#39;,
      \ &#39;ix&#39;     : &#39;I&#39;,
      \ &#39;n&#39;      : &#39;N&#39;,
      \ &#39;multi&#39;  : &#39;M&#39;,
      \ &#39;ni&#39;     : &#39;N&#39;,
      \ &#39;no&#39;     : &#39;N&#39;,
      \ &#39;R&#39;      : &#39;R&#39;,
      \ &#39;Rv&#39;     : &#39;R&#39;,
      \ &#39;s&#39;      : &#39;S&#39;,
      \ &#39;S&#39;      : &#39;S&#39;,
      \ &#39;&#39;     : &#39;S&#39;,
      \ &#39;t&#39;      : &#39;T&#39;,
      \ &#39;v&#39;      : &#39;V&#39;,
      \ &#39;V&#39;      : &#39;V&#39;,
      \ &#39;&#39;     : &#39;V&#39;,
      \ }
</code></pre><p>That&rsquo;s it! The setup is fairly simple and the results are quite good.</p>
<p>You can have a look at all my config and dotfiles in <a href="https://github.com/protiumx/.dotfiles/">here</a>.</p>
<p>PS: this article has its source on <a href="https://github.com/protiumx/blog/blob/main/articles/003/content.md">github</a>.
I&rsquo;m using a github action to publish it to different platforms. Read more
{{#if medium}}
<a href="https://medium.com/@protiumx/publish-your-blog-articles-everywhere-with-this-github-action-f80b9f9882a8">here</a>
{{/if}}
{{#if devto}}
<a href="https://dev.to/protium/publish-your-blog-articles-everywhere-with-this-github-action-3g6k">here</a>
{{/if}}</p>
<p>Related articles:</p>
<ul>
<li><a href="https://dev.to/protium/bash-gnu-stow-take-a-walk-while-your-new-macbook-is-being-set-up-p1o">Bash + GNU Stow: take a walk while your new macbook is being set up</a></li>
<li><a href="https://dev.to/protium/kitty-configuration-for-the-iterm-user-pe4">Kitty configuration for the iTerm user</a></li>
<li><a href="https://dev.to/protium/vim-delightful-settings-and-plugins-18am">Vim: Delightful settings and plugins</a></li>
</ul>
<p>👽</p>
]]></content></item><item><title>blogpub@v0.4.1: host media on github for your blog posts</title><link>https://protiumx.dev/blog/posts/host-media-on-github-for-your-blog-posts/</link><pubDate>Mon, 21 Feb 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/host-media-on-github-for-your-blog-posts/</guid><description>Hey everyone, this is just a small update on the blogpub action.
Relative paths In release v0.4.1 I added support for relative paths which means you can now use github to host the media you use in your blog posts. How does it work? Just use relative paths (to the markdown file) and you are ready to go. E.g. The action replaces all relative paths with the raw content github urls.</description><content type="html"><![CDATA[<p>Hey everyone, this is just a small update on the <a href="https://github.com/marketplace/actions/blogpub">blogpub</a> action.</p>
<h2 id="relative-paths">Relative paths</h2>
<p>In release <a href="https://github.com/protiumx/blogpub/releases/tag/v0.4.1">v0.4.1</a> I added support for relative
paths which means you can now use <strong>github</strong> to host the media you use in your blog posts.
How does it work? Just use relative paths (to the markdown file) and you are ready to go.
E.g.
<img src="./magic.gif" alt="magic"></p>
<p>The action replaces all relative paths with the <strong>raw content</strong> github urls.
In the example <code>./magic.gif</code> is replaced with <code>https://raw.githubusercontent.com/protiumx/blog/articles/blog-002/magic.gif</code>.
Check out the code <a href="https://github.com/protiumx/blogpub/blob/main/src/parser.ts#L31">here</a>.</p>
<p>That&rsquo;s all!</p>
<p>What other feature would you find useful for this action?
Let me know in the comments.</p>
<p>Related articles:</p>
<ul>
<li><a href="https://protiumx.dev/blog/posts/publish-your-blog-articles-with-this-github-action/">Publish your blog articles everywhere with this github action</a></li>
</ul>
]]></content></item><item><title>Publish your blog articles everywhere with this github action</title><link>https://protiumx.dev/blog/posts/publish-your-blog-articles-with-this-github-action/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/publish-your-blog-articles-with-this-github-action/</guid><description>Long ago I made this comment in this article:
This is a really good idea with great potential. Imagine a standarized API for different blogs. You can automatize publishing and editing, multiple collaborators. and use a git provider as unique source of content. And you can also make your git repo as some sort of blog. I&amp;rsquo;ll use it for my next posts for sure. Thanks!
It was an idea that I had left on the back of my head and I didn&amp;rsquo;t come back to it because I wasn&amp;rsquo;t writing articles actively.</description><content type="html"><![CDATA[<p>Long ago I made this <a href="https://dev.to/protium/comment/clno">comment</a> in this <a href="https://dev.to/maxime1992/manage-your-dev-to-blog-posts-from-a-git-repo-and-use-continuous-deployment-to-auto-publish-update-them-143j">article</a>:</p>
<blockquote>
<p>This is a really good idea with great potential.
Imagine a standarized API for different blogs.
You can automatize publishing and editing, multiple collaborators.
and use a git provider as unique source of content.
And you can also make your git repo as some sort of blog.
I&rsquo;ll use it for my next posts for sure.
Thanks!</p>
</blockquote>
<p>It was an idea that I had left on the back of my head and I didn&rsquo;t come back to it because I wasn&rsquo;t writing articles actively. But this has changed in the last months and I have published 6 articles during December. So I decided to revisit the idea and finally develop it.</p>
<h2 id="blogpub">blogpub</h2>
<p><a href="https://github.com/marketplace/actions/blogpub">blogpub</a> is a <strong>github action</strong> developed with <code>typescript</code> with the purpose of allowing you to use a <code>github</code> repository as <strong>source of truth</strong> for your blog posts. The action supports:</p>
<ul>
<li>Automatically publishing to <code>Medium</code> and <code>DEV.to</code></li>
<li>Templating</li>
<li>Metadata/config section (published, tags, title, etc)</li>
</ul>
<p>In fact, this article was automatically published by <code>blogpub</code> and you can see it&rsquo;s source in this <a href="https://github.com/protiumx/blog/tree/main/articles">folder</a>.</p>
<h2 id="template-support">Template Support</h2>
<p>Sometimes we want to add different content to our blog posts depending on the platform, for instance for <code>dev.to</code> I want to use <code>liquid tags</code>, which <code>medium</code> doesn&rsquo;t support.
For this purpose I have used <a href="https://handlebarsjs.com/">handlebars</a> to make use of conditionals. Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>{{#if medium}}
</span></span><span style="display:flex;"><span>This is only for Medium
</span></span><span style="display:flex;"><span>{{if}}
</span></span><span style="display:flex;"><span>{{#if devto}}
</span></span><span style="display:flex;"><span>This is only for DEV.to
</span></span><span style="display:flex;"><span>{{if}}
</span></span></code></pre></div><p>For the first release of the action, the template context contains:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">medium</span>: <span style="color:#66d9ef">boolean</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">devto</span>: <span style="color:#66d9ef">boolean</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="article-metadata">Article metadata</h2>
<p>I have added support for a <strong>metadata</strong> section (similar to dev.to) where we can specify the following attributes:</p>
<ul>
<li><code>title</code>: <code>[string]</code> The title of the article. If not specified, the <strong>first</strong> H1 heading will be used.</li>
<li><code>description</code>: <code>[string]</code> Description for <code>dev.to</code> API.</li>
<li><code>tags</code>: <code>[string]</code> Comma separated tags. Note: Medium allows up to 5 tags whereas Dev.to only 4.</li>
<li><code>license</code>: <code>[string]</code> Medium license type. Refer to <a href="https://github.com/Medium/medium-api-docs#33-posts">Medium API Docs</a>. <strong>Default</strong>: <code>public-domain</code></li>
<li><code>published</code>: <code>[boolean]</code>. <strong>Default</strong>: <code>true</code></li>
</ul>
<p>Example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-md" data-lang="md"><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span>title: First blogpub test
</span></span><span style="display:flex;"><span>tags: test, ci
</span></span><span style="display:flex;"><span>---
</span></span><span style="display:flex;"><span># I&#39;m using `blogpub`
</span></span></code></pre></div><h2 id="adopting-cicd-practices-for-blogging">Adopting CI/CD practices for blogging</h2>
<p>Imagine the following scenario:</p>
<ul>
<li>Write an article</li>
<li>Create PR</li>
<li>CI checks the <strong>spelling</strong></li>
<li>Your peers review the article and propose changes or approve it</li>
<li>Merge the PR to <code>main</code> and it gets published everywhere</li>
<li>Use <a href="https://github.com/marketplace/actions/send-tweet-action">send tweet action</a> to promote your new article.</li>
</ul>
<p>I can imagine this workflow in a company where different colleagues write articles together. I like the idea that we could also automatize tweets, this is why <code>blogpub</code> outputs the URLs of the article after publishing it.</p>
<h2 id="usage">Usage</h2>
<p>Ideally you want to run this action for every push to your <code>main</code> branch. This setup should be enough.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#f92672">name</span>: <span style="color:#e6db74">&#39;publish&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">on</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">push</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">branches</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;main&#39;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">paths</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#e6db74">&#39;articles/*&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">jobs</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">publish</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">name</span>: <span style="color:#ae81ff">publish new article</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest    </span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">steps</span>:
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Checkout</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</span></span><span style="display:flex;"><span>      - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">blogpub</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">protiumx/blogpub@v0.2.3</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">with</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">articles_folder</span>: <span style="color:#ae81ff">articles</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">devto_api_key</span>: <span style="color:#ae81ff">$\{{ secrets.DEVTO_API_KEY }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">gh_token</span>: <span style="color:#ae81ff">$\{{ secrets.GH_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">medium_token</span>: <span style="color:#ae81ff">$\{{ secrets.MEDIUM_TOKEN }}</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">medium_user_id</span>: <span style="color:#ae81ff">&lt;user_id&gt;</span>
</span></span></code></pre></div><p>Few things to take into account:</p>
<ul>
<li>We only want to run the action for files inside a folder.</li>
<li>You need to setup repository secrets with your tokens and api keys.</li>
</ul>
<p>Check this <a href="https://github.com/protiumx/blog">blog source</a> to see this in action.</p>
<h2 id="what-is-missing">What is missing?</h2>
<p>For the first release I just wanted to be able to publish the articles in Medium and DEV.to. But there are a few features that would be handy:</p>
<ul>
<li><strong>Uploading images:</strong> Imagine also versioning images and then uploading those images automatically</li>
<li><strong>Support for updates:</strong> If you want to make a correction, it should be possible to update the source and it should get reflected in all the platform the article was published to.</li>
<li><strong>Platform specific configuration</strong>: maybe we want different tags per platform</li>
<li><strong>Support multiple articles:</strong> at the moment <code>blogpub</code> publishes only 1 article per run.</li>
</ul>
<p>What else would you like to have? Let me know in the comments!</p>
<p>That&rsquo;s it!
As usual, any help is well received and I have a <a href="https://github.com/protiumx/blogpub#todo">TODO</a> list if you would like to collaborate with this project.</p>
<p><a href="https://github.com/protiumx/blogpub">blogpub repo</a></p>
<p>🤖</p>
]]></content></item></channel></rss>