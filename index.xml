<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>protiumx blog</title><link>https://protiumx.dev/blog/</link><description>Recent content on protiumx blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Sun, 19 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://protiumx.dev/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Github template for Golang services</title><link>https://protiumx.dev/blog/posts/github-template-for-golang-services/</link><pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/github-template-for-golang-services/</guid><description>As a weekend project I created a github template that can be very handy for creating go services with relational databases. Let&amp;rsquo;s take a look at what is included.
Task Runner For many years, GNU make has been my to-go tool to run rules and tasks for any sort of project. It is fairly simple to use but it can also become complex as some rules might require to execute external tools or even declare bash functions with in a rule definition.</description></item><item><title>Creating a Text-based UI with rust</title><link>https://protiumx.dev/blog/posts/creating-a-text-based-ui-with-rust/</link><pubDate>Thu, 02 Jun 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/creating-a-text-based-ui-with-rust/</guid><description>Intro Continuing with my last project rq, I recently started to work on this project card: Implement interactive prompt. Let&amp;rsquo;s have a look how can we implement a text-based UI with rust.
The ANSI Standard Before we dive into the wonderful world of terminal emulators and text-based interfaces, we need to understand what the ANSI escape sequences are:
ANSI escape sequences are a standard for in-band signaling to control cursor location, color, font styling, and other options on video text terminals and terminal emulators.</description></item><item><title>My profile website is now a terminal</title><link>https://protiumx.dev/blog/posts/my-profile-website-is-now-a-terminal/</link><pubDate>Wed, 25 May 2022 11:42:13 +0200</pubDate><guid>https://protiumx.dev/blog/posts/my-profile-website-is-now-a-terminal/</guid><description>When I was younger I used to think that my profile website would be a really cool, fully featured website, with shiny colors and animations; built with the latest cutting edge frontend technology&amp;hellip; Turns out that the older I get the more I prefer a simple terminal. No UI, just text and commands.
The last time I updated my profile website, it looked like this:
It was already pretty minimalistic, right?</description></item><item><title>An HTTP request parser with rust and pest.rs</title><link>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest.rs/</link><pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/an-http-request-parser-with-rust-and-pest.rs/</guid><description>Introduction I happened to have learned about parsing expression grammars a few days ago and got really excited about writing my own grammar. As I was missing this VS Code extension when working on neovim, an idea popped up: What if I write an HTTP grammar and an execute request from an interactive prompt?
Preview:
Preparation For our grammar, we need to make sure we understand the HTTP standard defined here.</description></item><item><title>Automate an articles section in your github.io page</title><link>https://protiumx.dev/blog/posts/automate-an-articles-section-in-your-github.io-page/</link><pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/automate-an-articles-section-in-your-github.io-page/</guid><description>Today I wanted to update my github page to show a list of my last Medium articles. I ended up automating it.
First approach My first attempt was fetching the RSS feed using the URL medium.com/feed/@username and parse the xml document. But I was hit with a charming CORS error. Now what?
I remembered that I&amp;rsquo;m using a github action to update a similar section on my github profile. So, what if I tell this action that the README file is called index.</description></item><item><title>kitty + zsh + powerlevel10k = ✨ aesthetics ✨</title><link>https://protiumx.dev/blog/posts/kitty--zsh--powerlevel10k-aesthetics/</link><pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/kitty--zsh--powerlevel10k-aesthetics/</guid><description>Who doesn&amp;rsquo;t like a good looking terminal and useful layouts and keymaps? This has always been my goal since I started using linux as main OS.
I have used lots of different terminals, plugins and settings over the years but I think now I achieved the glory with my current setup:
Let&amp;rsquo;s have a look to the configuration.
What do I use? Terminal: Kitty Shell: zsh zsh config management: Oh my Zsh!</description></item><item><title>Publish your blog articles everywhere with this github action</title><link>https://protiumx.dev/blog/posts/publish-your-blog-articles-everywhere-with-this-github-action/</link><pubDate>Mon, 17 Jan 2022 00:00:00 +0000</pubDate><guid>https://protiumx.dev/blog/posts/publish-your-blog-articles-everywhere-with-this-github-action/</guid><description>Long ago I made this comment in this article:
This is a really good idea with great potential. Imagine a standarized API for different blogs. You can automatize publishing and editing, multiple collaborators. and use a git provider as unique source of content. And you can also make your git repo as some sort of blog. I&amp;rsquo;ll use it for my next posts for sure. Thanks!
It was an idea that I had left on the back of my head and I didn&amp;rsquo;t come back to it because I wasn&amp;rsquo;t writing articles actively.</description></item></channel></rss>